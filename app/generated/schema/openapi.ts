/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/card/{card_position}": {
    get: operations["cardGet"];
    /** @description Update an existing card slot, changing its permissions group or card number. In order to prevent accidentally overwriting an existing card entry the current card value must also be submitted as part of this request. */
    put: operations["cardPut"];
    delete: operations["cardDelete"];
  };
  "/cards": {
    get: operations["cardsGet"];
  };
  "/status": {
    get: operations["statusGet"];
  };
  "/time": {
    get: operations["timeGet"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    readonly Alarm: {
      /** @enum {string} */
      readonly armed_state: "armed" | "chimeOnly" | "disarmed";
      readonly id: string;
      /** @enum {string} */
      readonly siren_state: "activated" | "delayed" | "disarmed";
    };
    readonly Card: {
      readonly card_number: components["schemas"]["CardNumber"];
      readonly permissions: components["schemas"]["Permissions"];
      readonly position: components["schemas"]["CardPosition"];
    };
    readonly CardNumber: string;
    readonly CardPosition: string;
    /**
     * Format: date-time 
     * @example 2020-01-01T00:00:00.000Z
     */
    readonly DateTime: string;
    readonly DeviceStatus: {
      readonly alarms: readonly (components["schemas"]["Alarm"])[];
      readonly doors: readonly (components["schemas"]["Door"])[];
    };
    readonly Door: {
      readonly id: string;
      readonly is_locked: boolean;
      readonly is_open: boolean;
    };
    readonly ErrorResponse: string;
    /** @description A Permission is a byte value between 0 and 255 that can be used to group cards into groups of behavior. */
    readonly Permissions: number;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  cardGet: {
    parameters: {
      readonly path: {
        card_position: components["schemas"]["CardPosition"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          readonly "application/json": components["schemas"]["Card"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          readonly "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  cardPut: {
    /** @description Update an existing card slot, changing its permissions group or card number. In order to prevent accidentally overwriting an existing card entry the current card value must also be submitted as part of this request. */
    parameters: {
      readonly path: {
        card_position: components["schemas"]["CardPosition"];
      };
    };
    readonly requestBody: {
      readonly content: {
        readonly "application/json": {
          readonly card_number: components["schemas"]["CardNumber"];
          readonly current_card_number: components["schemas"]["CardNumber"];
          readonly permissions: components["schemas"]["Permissions"];
        };
      };
    };
    responses: {
      /** @description OK */
      204: never;
      /** @description Bad Request */
      400: {
        content: {
          readonly "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          readonly "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  cardDelete: {
    parameters: {
      readonly path: {
        card_position: components["schemas"]["CardPosition"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description Not Found */
      404: {
        content: {
          readonly "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  cardsGet: {
    responses: {
      /** @description OK */
      200: {
        content: {
          readonly "application/json": readonly (components["schemas"]["Card"])[];
        };
      };
    };
  };
  statusGet: {
    responses: {
      /** @description OK */
      200: {
        content: {
          readonly "application/json": components["schemas"]["DeviceStatus"];
        };
      };
    };
  };
  timeGet: {
    responses: {
      /** @description OK */
      200: {
        content: {
          readonly "application/json": components["schemas"]["DateTime"];
        };
      };
    };
  };
}

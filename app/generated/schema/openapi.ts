/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/status": {
    get: operations["statusGet"];
  };
  "/time": {
    get: operations["timeGet"];
  };
  "/user/{userId}": {
    get: operations["userGet"];
    delete: operations["userDelete"];
  };
  "/users": {
    get: operations["usersGet"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    readonly Alarm: {
      /** @enum {string} */
      readonly armedState: "armed" | "chimeOnly" | "disarmed";
      readonly id: string;
      /** @enum {string} */
      readonly sirenState: "armed" | "delayed" | "disarmed";
    };
    /**
     * Format: date-time 
     * @example 2020-01-01T00:00:00.000Z
     */
    readonly DateTime: string;
    readonly DeviceStatus: {
      readonly alarms: readonly (components["schemas"]["Alarm"])[];
      readonly doors: readonly (components["schemas"]["Door"])[];
    };
    readonly Door: {
      readonly id: string;
      readonly isLocked: boolean;
      readonly isOpen: boolean;
    };
    readonly ErrorResponse: string;
    readonly User: {
      readonly id: components["schemas"]["UserId"];
      readonly tag: string;
      readonly userMask: components["schemas"]["UserMask"];
    };
    readonly UserId: string;
    /** @description A UserMask is a byte value between 0 and 255 that may be used in user operations to apply actions to large swaths of users simultaneously, instead of applying updates user-by-user. */
    readonly UserMask: number;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  statusGet: {
    responses: {
      /** @description OK */
      200: {
        content: {
          readonly "application/json": components["schemas"]["DeviceStatus"];
        };
      };
    };
  };
  timeGet: {
    responses: {
      /** @description OK */
      200: {
        content: {
          readonly "application/json": components["schemas"]["DateTime"];
        };
      };
    };
  };
  userGet: {
    parameters: {
      readonly path: {
        userId: components["schemas"]["UserId"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          readonly "application/json": components["schemas"]["User"];
        };
      };
      /** @description Not Found */
      404: {
        content: {
          readonly "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  userDelete: {
    parameters: {
      readonly path: {
        userId: components["schemas"]["UserId"];
      };
    };
    responses: {
      /** @description No Content */
      204: never;
      /** @description Not Found */
      404: {
        content: {
          readonly "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  usersGet: {
    responses: {
      /** @description OK */
      200: {
        content: {
          readonly "application/json": readonly (components["schemas"]["User"])[];
        };
      };
    };
  };
}
